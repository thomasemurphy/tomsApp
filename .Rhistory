lines(feb_data$dateTime, feb_data$Sub_metering_2, col="red")
lines(feb_data$dateTime, feb_data$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"),
lty="solid", bty="n")
# top right
plot(feb_data$dateTime, feb_data$Voltage, type="l", xlab="datetime", ylab="Voltage")
# bottom right
plot(feb_data$dateTime, feb_data$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
# dev.off()
load_data <- function(filename="household_power_consumption.txt"){
all_data <- read.table(filename, header=TRUE, sep=";")
all_data[,"dateTime"] <- as.POSIXct(paste(all_data$Date, all_data$Time), format="%d/%m/%Y %H:%M:%S")
feb_data <- subset(all_data, dateTime >= as.POSIXct("2007-02-01", format="%Y-%m-%d") & dateTime < as.POSIXct("2007-02-03", format="%Y-%m-%d"))
feb_data
}
feb_data$Global_active_power <- as.numeric(as.character(feb_data$Global_active_power))
feb_data$Sub_metering_1 <- as.numeric(as.character(feb_data$Sub_metering_1))
feb_data$Sub_metering_2 <- as.numeric(as.character(feb_data$Sub_metering_2))
feb_data$Sub_metering_3 <- as.numeric(as.character(feb_data$Sub_metering_3))
feb_data$Voltage <- as.numeric(as.character(feb_data$Voltage))
feb_data$Global_reactive_power <- as.numeric(as.character(feb_data$Global_reactive_power))
png("plot4.png")
par(mfcol=c(2,2))
# top left
plot(feb_data$dateTime, feb_data$Global_active_power, type="l",
xlab="", ylab="Global Active Power (kilowatts)")
# bottom left
plot(feb_data$dateTime, feb_data$Sub_metering_1, type="l",
xlab="", ylab="Energy sub metering")
lines(feb_data$dateTime, feb_data$Sub_metering_2, col="red")
lines(feb_data$dateTime, feb_data$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col=c("black","red","blue"),
lty="solid", bty="n")
# top right
plot(feb_data$dateTime, feb_data$Voltage, type="l", xlab="datetime", ylab="Voltage")
# bottom right
plot(feb_data$dateTime, feb_data$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
install.packages("ggplot2")
swirl
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data=airquality)
xyplot(Ozone ~ Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data=airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data=airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
swirl()
library(swirl)
siwrl()
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
V[,1]
svd[,1]
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,c(1,2)]
svd2$d
dim(faceData)
a1 <- 9
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- 8
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a <- 0
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,c(562,563)])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
mypclust(hclustering, lab.col=unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,1:3])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$[,2])
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
pnorm(.95,0,1)
?pnorm
pnorm(.975,0,1)
pnorm(.5,0,1)
pnorm(0,0,1)
pnorm(0.1,0,1)
pnorm(1100, 1100, 75)
pnorm(1247, 1100, 75)
pnorm(977, 1100, 75)
pnorm(1223, 1100, 75)
pnorm(1175, 1100, 75)
75^2
75^2/100
sqrt(56.25)
7.5*1.645+1100
?rbinom
pbinom(0,10,.5)
pbinom(-1,10,.5)
pbinom(5,10,.5)
pbinom(c(5,3),10,.5)
h <- pbinom(c(5,3),10,.5)
h[2]-h[1]
pbinom(10,10,.5)
pbinom(5,10,.5)
pbinom(3,10,.5)
pbinom(4,5,.5, lower.tail=FALSE)
pbinom(5,5,.5, lower.tail=FALSE)
pbinom(3,5,.5, lower.tail=FALSE)
pbinom(3,5,.5)
choose(5,5)
choose(4,5)
choose(5,4)
.5^5+choose(5,4)*.5^5
?rpoiss
?rpois
ppois(14, 15)
ppois(16, 15)
ppois(16,15) - ppois(14,15)
?runif
ppois(5,10/3)
?ppois
ppois(10/3, 5)
ppois(10/3, 5)
ppois(10, 5*3)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var="weight")
names(wideCW)[-(1:2)]<- paste("time", names(wideCW)[-(1:2)], sep="")
library(dplyr)
wideCW <- mutate(wideCW, gain=time21 - time0)
library(ggplot)
library(ggplot2)
ggplot(wideCW, aes(x=time, y=weight, color=diet)) + geom_line() + facet_grid(.~diet)
ggplot(wideCW, aes(x=time, y=weight, color=Diet)) + geom_line() + facet_grid(.~Diet)
ggplot(wideCW, aes(x=time, y=Weight, color=Diet)) + geom_line() + facet_grid(.~Diet)
ggplot(wideCW, aes(x=time, y=chickWeight, color=Diet)) + geom_line() + facet_grid(.~Diet)
names(wideCW)
qt(0.95,15)
?qt
mn <- 1100
s <- 30
mn + c(-1,1) * qt(.95, 9) * s /sqrt(10)
mn + c(-1,1) * qt(.95, 9) * s /sqrt(9)
mn + c(-1,1) * qt(.95, 9) * s /sqrt(10)
mn + c(-1,1) * qt(.95, 8) * s /sqrt(9)
mn + c(-1,1) * qt(.95, 8) * s /sqrt(8)
mn + c(-1,1) * qt(.975, 8) * s /sqrt(9)
qt(.975,8)
mn <- -2
s <- 2.1
mn + c(-1,1) * qt(.975, 8) * s /sqrt(9)
mn + c(-1,1) * qt(.975, 8) * .3 /sqrt(9)
mn + c(-1,1) * qt(.975, 8) * 1.5 /sqrt(9)
mn + c(-1,1) * qt(.975, 8) * 2.6 /sqrt(9)
sp <- sqrt((10*.6^2 + 10*.68^2)/(10+10-2))
3 - 5 + c(-1,1)*qt(.975, 18) * sp * (1/10 + 1/10)^.5
sp <- sqrt((10*.6 + 10*.68)/(10+10-2))
3 - 5 + c(-1,1)*qt(.975, 18) * sp * (1/10 + 1/10)^.5
sp
sp <- sqrt((9*.6 + 9*.68)/(10+10-2))
sp
3 - 5 + c(-1,1)*qt(.975, 18) * sp * (1/10 + 1/10)^.5
?pz
?pnorm
sp <- sqrt((99*.5^ + 99*2^2)/(100+100-2))
sp
sp <- sqrt((99*.5^2 + 99*2^2)/(100+100-2))
sp
4 - 6 + c(-1,1)*qt(.975, 198) * sp * (1/100 + 1/100)^.5
4 - 6 + c(-1,1)*qnorm(.975, 198) * sp * (1/100 + 1/100)^.5
4 - 6 + c(-1,1)*qnorm(.975, 0, sp) * sp * (1/100 + 1/100)^.5
sp <- sqrt((8*1.5^2 + 8*1.8^2)/(9+9-2))
sp
-3 - 1 + c(-1,1)*qt(.95, 16) * sp * (1/9 + 1/9)^.5
sbp <- c(-8,-3,1,-2,-5)
t.test(x)
t.test(sbp)
qt(.975,8)
se <- 900/sqrt(8)
se
1100 - se*qt(.975,8)
1100 + se*qt(.975,8)
1100 + c(-1,1)*30/sqrt(8)*qt(.975,8)
1100 + c(-1,1)*30/sqrt(9)*qt(.975,8)
?pbinom
dbinom(3,4,.5)
dbinom(4,4,.5)
choose(4,3)
choose(4,2)
choose(4,3)*0.5^4 + 0.5^4
10/1787
?rpois
ppois(10/1787, lambda=0.01)
?pbinom
qbinom(3,4,.5)
pbinom(3,4,.5)
pbinom(2,4,.5)
pbinom(3,4,.5, lower.tail = FALSE)
pbinom(4,4,.5, lower.tail = FALSE)
pbinom(2,4,.5, lower.tail = FALSE)
?ppois
ppois(10/1787, lambda=0.01)
ppois(.01, lambda=10/1787)
qpois(10/1787, lambda=0.01)
rpois(1787, 0.01)
10/1787
ppois(.01*1787, lambda=10)
ppois(10, lambda=1787*.01)
4/(1.65*3)
choose(48,3)/choose(50,5)
10/50/49
20/50/49
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
plot(x,y)
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef
.223*sqrt(7)
resid(fit)
std(resid(fit))
sd(resid(fit))
.223*sqrt(7-1)
.223*sqrt(7-2)
library(datasets)
data(mtcars)
mtcars
head(mtcars)
str(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
mypredict <- predict(fit, newdata=mean(mtcars$wt))
mypredict
mean(mtcars$wt)
fit
mypredict <- predict(fit, newdata=c(mean(mtcars$wt)))
mypredict
mypredict <- predict(fit, newdata=mean(mtcars$wt), interval=("prediction"))
mypredict
mean(mtcars$wt)
predict(fit, newdata=mean(mtcars$wt), interval=("prediction"))
?predict
nrow(mtcars)
fit
predict(fit, newdata=I(mean(mtcars$wt)), interval=("prediction"))
predict(fit, mtcars$wt=mean(mtcars$wt), interval=("prediction"))
fit <- lm(mpg ~ wt, data=mtcars)
predict(fit, wt=mean(mtcars$wt), interval=("prediction"))
predict(fit, wt=c(mean(mtcars$wt)), interval=("prediction"))
predict(fit, newdata=data.frame(wt=mean(mtcars$wt)), interval=("prediction"))
summary(fit)
mnwt <- mean(mtcars$wt)
fit$coefficients
fit$coefficients[1]
fit$coefficients[1]*7
37.28 - 5.344 * mnwt
predict(fit, newdata=data.frame(wt=mean(mtcars$wt)), interval=("confidence"))
?mtcars
predict(fit, newdata=data.frame(wt=3), interval=("prediction"))
sumcoef <- summary(fit)$coefficients
sumcoef[2,1] + c(-1,1) * qt(.975, df=fit$df) * sumcoef[2,2]
(sumcoef[2,1] + c(-1,1) * qt(.975, df=fit$df) * sumcoef[2,2]) * 2
summary(fit)
predict(fit, newdata=data.frame(mtcars$wt))
predict(fit, newdata=mtcars$wt)
fit
predict(fit, wt=mtcars$wt)
predict(fit, wt=data.frame(mtcars$wt))
predict(fit, wt=data.frame(mtcars$wt)) - 1
predict(fit, wt=data.frame(mtcars$wt)) - mtcars$wt
predict(fit, wt=data.frame(mtcars$wt)) - mtcars$mpg
sum((predict(fit, wt=data.frame(mtcars$wt)) - mtcars$mpg)^2)
summary(fit)
3.046*sqrt(30)
3.046^2 * 30
fit$residuals
fit$SSE
fit$fdas
str(fit)
sum((mtcars$mpg - mean(mtcars$mpg)^2)
)
sum((mtcars$mpg - mean(mtcars$mpg))^2)
278/1126
fit$residuals
sum(fit$residuals)
exp(1)
exp(.35*2)
exp(.35)
exp(.35)*2
(exp(.35*2) - exp(.35)) / exp(.35)
library(datasets)
data(mtcars)
summary(lm(mpg ~ factor(cyl) + wt, data=mtcars))
summary(lm(mpg ~ factor(cyl) * wt, data=mtcars))
summary(lm(mpg ~ factor(cyl) + wt, data=mtcars))
summary(lm(mpg ~ factor(cyl), data=mtcars))
summary(lm(mpg ~ factor(cyl) + wt, data=mtcars))
summary(lm(mpg ~ factor(cyl) * wt, data=mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?hatvalues
?hat
?hatvalues
lm.influence(fit(y ~ x))$hat
lm.influence(lm(y ~ x))$hat
plot(x,y)
lm.influence(lm(y ~ x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm.influence(lm(y ~ x))$hat
dfbetas(lm(y~x))[5]
dfbetas(lm(y~x))
?mtcars
summary(lm(mpg ~ factor(cyl) + wt, data=mtcars))
summary(lm(mpg ~ factor(cyl), data=mtcars))
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
library(MASS)
?shuttle
head(shuttle)
summary(shuttle)
summary(glm(shuttle$use ~ shuttle$wind, family="binomial"))
summary(glm(I(shuttle$use=="auto") ~ shuttle$wind, family="binomial"))
summary(glm(I(shuttle$use=="auto") ~ I(shuttle$wind=="head"), family="binomial"))
nrow(subset(shuttle, wind=="head" & use="auto"))
nrow(subset(shuttle, wind=="head" & use=="auto"))
nrow(subset(shuttle, wind=="head" & use=="noauto"))
nrow(subset(shuttle, wind=="tail" & use=="auto"))
nrow(subset(shuttle, wind=="tail" & use=="noauto"))
exp(-.03181)
summary(glm(I(shuttle$use=="auto") ~ I(shuttle$wind=="head") + shuttle$magn, family="binomial"))
exp(-3.201e-2)
summary(glm(I(shuttle$use=="auto") ~ I(shuttle$wind=="head") * shuttle$magn, family="binomial"))
exp(-1.672e-15)
summary(glm(I(shuttle$use=="auto") ~ I(shuttle$wind=="head"), family="binomial"))
summary(glm(I(shuttle$use=="auto") ~ I(shuttle$wind=="tail"), family="binomial"))
summary(glm(I(shuttle$use=="auto") ~ I(1 - shuttle$wind=="head"), family="binomial"))
summary(glm(I(shuttle$use=="auto") ~ I(!shuttle$wind=="head"), family="binomial"))
summary(glm(I(shuttle$use=="auto") ~ I(!shuttle$wind=="head"), family="logistic"))
summary(glm(I(shuttle$use=="auto") ~ I(!shuttle$wind=="head"), family="bino"))
summary(glm(I(shuttle$use=="auto") ~ I(!shuttle$wind=="head"), family="binomial"))
summary(glm(I(shuttle$use=="auto") ~ I(shuttle$wind=="head"), family="binomial"))
summary(glm(I(shuttle$use=="noauto") ~ I(shuttle$wind=="head"), family="binomial"))
summary(glm(I(shuttle$use=="auto") ~ I(shuttle$wind=="head"), family="binomial"))
library(datasets)
data(InspectSprays)
data(InsectSprays)
head(InsectSprays)
summary(glm(count ~ factor(spray), data=InsectSprays, family="poisson"))
library(ggplot2)
ggplot(data=InsectSprays, mapping=aes(x=factor(spray), y=count)) + geom_violin()
summary(glm(count ~ factor(spray) - 1, data=InsectSprays, family="poisson"))
2.67415/2.73003
data("warpbreaks")
head(warpbreaks)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- c(0)
knots
splineterms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineterms
xMat <- cbind(1, x, splineterms)
xMat
yhat <- predict(lm(y ~ xMat - 1))
lines(x, yhat, col="red")
summary(lm(y ~ xMat - 1))
summary(lm(y ~ xMat))
lines(x, predict(lm(y~xMat)), col="blue")
-1.02416 + 2.03723
library(datasets)
data(mtcars)
mean(subset(mtcars, am==1)$mpg)
mean(subset(mtcars, am==0)$mpg)
library(datasets)
library(ggplot2)
data(mtcars)
mtcars$trans <- ifelse(mtcars$am==1, "auto", "manual")
mpg_wt_fit <- lm(mpg ~ wt, data=mtcars)
summary(mpg_wt_fit)
coefficients(mpg_wt_fit)
coefficients(mpg_wt_fit)[1]
print("%.4f", coefficients(mpg_wt_fit[1]))
print("%.4f", coefficients(mpg_wt_fit[[1]]))
print("%.4f", coefficients(mpg_wt_fit[1]$(Intercept)))
print("%.4f", coefficients(mpg_wt_fit[1]$(Intercept))))
sprintf("%.4f", coefficients(mpg_wt_fit)[1])
sprintf("%.2f", coefficients(mpg_wt_fit)[1])
sprintf("%.1f", coefficients(mpg_wt_fit)[1])
sprintf("%.3f", coefficients(mpg_wt_fit)[2])
a = 1, b=2
a <- 1; b<-2
shiny::runApp('Documents/coursera data science/data products/project/tomsApp')
runApp('Documents/coursera data science/data products/project/tomsApp')
runApp('Documents/coursera data science/data products/project/tomsApp')
runApp('Documents/coursera data science/data products/project/tomsApp')
getwd()
setwd("Documents/coursera data science/data products/project/tomsApp")
runApp()
dir()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mylist <- list(2015="hi")
mylist <- list("2015"="hi")
mylist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mylist <- list("2015"="400px", "2016"="800px")
mylist
mylist["2015"]
mylist[["2015"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mylist
mylist[2015]
all_years_data <- read.csv("data/all_years_leaderboard.csv")
class(all_years_data$Year)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
all_years_data %>% group_by(Year) %>% summarize(n())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
